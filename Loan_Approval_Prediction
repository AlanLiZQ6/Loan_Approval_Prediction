{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"gpu","dataSources":[{"sourceId":84894,"databundleVersionId":9709193,"sourceType":"competition"}],"dockerImageVersionId":30787,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# Import Packages","metadata":{}},{"cell_type":"code","source":"import torch\nfrom torch import nn\n#from d2l import torch as d2l\nfrom torch.utils.data import DataLoader\nimport torch.optim as optim\nfrom torchvision import datasets, transforms\nimport xgboost as xgb\nimport lightgbm as lgbm \nfrom lightgbm import log_evaluation, early_stopping\nfrom tqdm import tqdm\nimport catboost as cb\nfrom sklearn.metrics import roc_auc_score","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-10-12T13:50:24.844283Z","iopub.execute_input":"2024-10-12T13:50:24.845038Z","iopub.status.idle":"2024-10-12T13:50:24.850449Z","shell.execute_reply.started":"2024-10-12T13:50:24.844999Z","shell.execute_reply":"2024-10-12T13:50:24.849552Z"}},"outputs":[],"execution_count":16},{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2024-10-12T13:14:41.907869Z","iopub.execute_input":"2024-10-12T13:14:41.908637Z","iopub.status.idle":"2024-10-12T13:14:41.915802Z","shell.execute_reply.started":"2024-10-12T13:14:41.908585Z","shell.execute_reply":"2024-10-12T13:14:41.914938Z"}},"outputs":[{"name":"stdout","text":"/kaggle/input/playground-series-s4e10/sample_submission.csv\n/kaggle/input/playground-series-s4e10/train.csv\n/kaggle/input/playground-series-s4e10/test.csv\n","output_type":"stream"}],"execution_count":2},{"cell_type":"markdown","source":"# 1. XGB_boost","metadata":{}},{"cell_type":"markdown","source":"## 1. Preprocessing Dataset","metadata":{}},{"cell_type":"code","source":"train_dataset = pd.read_csv('/kaggle/input/playground-series-s4e10/train.csv')\ntest_dataset = pd.read_csv('/kaggle/input/playground-series-s4e10/test.csv')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-10-12T13:14:41.916954Z","iopub.execute_input":"2024-10-12T13:14:41.917258Z","iopub.status.idle":"2024-10-12T13:14:42.169816Z","shell.execute_reply.started":"2024-10-12T13:14:41.917214Z","shell.execute_reply":"2024-10-12T13:14:42.169023Z"}},"outputs":[],"execution_count":3},{"cell_type":"markdown","source":"### Extract Train_feature, Train_labels and Test_feature","metadata":{}},{"cell_type":"code","source":"train_dataset.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-10-12T13:14:42.170892Z","iopub.execute_input":"2024-10-12T13:14:42.171179Z","iopub.status.idle":"2024-10-12T13:14:42.194500Z","shell.execute_reply.started":"2024-10-12T13:14:42.171148Z","shell.execute_reply":"2024-10-12T13:14:42.193633Z"}},"outputs":[{"execution_count":4,"output_type":"execute_result","data":{"text/plain":"   id  person_age  person_income person_home_ownership  person_emp_length  \\\n0   0          37          35000                  RENT                0.0   \n1   1          22          56000                   OWN                6.0   \n2   2          29          28800                   OWN                8.0   \n3   3          30          70000                  RENT               14.0   \n4   4          22          60000                  RENT                2.0   \n\n  loan_intent loan_grade  loan_amnt  loan_int_rate  loan_percent_income  \\\n0   EDUCATION          B       6000          11.49                 0.17   \n1     MEDICAL          C       4000          13.35                 0.07   \n2    PERSONAL          A       6000           8.90                 0.21   \n3     VENTURE          B      12000          11.11                 0.17   \n4     MEDICAL          A       6000           6.92                 0.10   \n\n  cb_person_default_on_file  cb_person_cred_hist_length  loan_status  \n0                         N                          14            0  \n1                         N                           2            0  \n2                         N                          10            0  \n3                         N                           5            0  \n4                         N                           3            0  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>person_age</th>\n      <th>person_income</th>\n      <th>person_home_ownership</th>\n      <th>person_emp_length</th>\n      <th>loan_intent</th>\n      <th>loan_grade</th>\n      <th>loan_amnt</th>\n      <th>loan_int_rate</th>\n      <th>loan_percent_income</th>\n      <th>cb_person_default_on_file</th>\n      <th>cb_person_cred_hist_length</th>\n      <th>loan_status</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>37</td>\n      <td>35000</td>\n      <td>RENT</td>\n      <td>0.0</td>\n      <td>EDUCATION</td>\n      <td>B</td>\n      <td>6000</td>\n      <td>11.49</td>\n      <td>0.17</td>\n      <td>N</td>\n      <td>14</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1</td>\n      <td>22</td>\n      <td>56000</td>\n      <td>OWN</td>\n      <td>6.0</td>\n      <td>MEDICAL</td>\n      <td>C</td>\n      <td>4000</td>\n      <td>13.35</td>\n      <td>0.07</td>\n      <td>N</td>\n      <td>2</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2</td>\n      <td>29</td>\n      <td>28800</td>\n      <td>OWN</td>\n      <td>8.0</td>\n      <td>PERSONAL</td>\n      <td>A</td>\n      <td>6000</td>\n      <td>8.90</td>\n      <td>0.21</td>\n      <td>N</td>\n      <td>10</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>3</td>\n      <td>30</td>\n      <td>70000</td>\n      <td>RENT</td>\n      <td>14.0</td>\n      <td>VENTURE</td>\n      <td>B</td>\n      <td>12000</td>\n      <td>11.11</td>\n      <td>0.17</td>\n      <td>N</td>\n      <td>5</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>4</td>\n      <td>22</td>\n      <td>60000</td>\n      <td>RENT</td>\n      <td>2.0</td>\n      <td>MEDICAL</td>\n      <td>A</td>\n      <td>6000</td>\n      <td>6.92</td>\n      <td>0.10</td>\n      <td>N</td>\n      <td>3</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":4},{"cell_type":"code","source":"test_dataset.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-10-12T13:14:42.197539Z","iopub.execute_input":"2024-10-12T13:14:42.198005Z","iopub.status.idle":"2024-10-12T13:14:42.214030Z","shell.execute_reply.started":"2024-10-12T13:14:42.197970Z","shell.execute_reply":"2024-10-12T13:14:42.213079Z"}},"outputs":[{"execution_count":5,"output_type":"execute_result","data":{"text/plain":"      id  person_age  person_income person_home_ownership  person_emp_length  \\\n0  58645          23          69000                  RENT                3.0   \n1  58646          26          96000              MORTGAGE                6.0   \n2  58647          26          30000                  RENT                5.0   \n3  58648          33          50000                  RENT                4.0   \n4  58649          26         102000              MORTGAGE                8.0   \n\n         loan_intent loan_grade  loan_amnt  loan_int_rate  \\\n0    HOMEIMPROVEMENT          F      25000          15.76   \n1           PERSONAL          C      10000          12.68   \n2            VENTURE          E       4000          17.19   \n3  DEBTCONSOLIDATION          A       7000           8.90   \n4    HOMEIMPROVEMENT          D      15000          16.32   \n\n   loan_percent_income cb_person_default_on_file  cb_person_cred_hist_length  \n0                 0.36                         N                           2  \n1                 0.10                         Y                           4  \n2                 0.13                         Y                           2  \n3                 0.14                         N                           7  \n4                 0.15                         Y                           4  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>person_age</th>\n      <th>person_income</th>\n      <th>person_home_ownership</th>\n      <th>person_emp_length</th>\n      <th>loan_intent</th>\n      <th>loan_grade</th>\n      <th>loan_amnt</th>\n      <th>loan_int_rate</th>\n      <th>loan_percent_income</th>\n      <th>cb_person_default_on_file</th>\n      <th>cb_person_cred_hist_length</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>58645</td>\n      <td>23</td>\n      <td>69000</td>\n      <td>RENT</td>\n      <td>3.0</td>\n      <td>HOMEIMPROVEMENT</td>\n      <td>F</td>\n      <td>25000</td>\n      <td>15.76</td>\n      <td>0.36</td>\n      <td>N</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>58646</td>\n      <td>26</td>\n      <td>96000</td>\n      <td>MORTGAGE</td>\n      <td>6.0</td>\n      <td>PERSONAL</td>\n      <td>C</td>\n      <td>10000</td>\n      <td>12.68</td>\n      <td>0.10</td>\n      <td>Y</td>\n      <td>4</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>58647</td>\n      <td>26</td>\n      <td>30000</td>\n      <td>RENT</td>\n      <td>5.0</td>\n      <td>VENTURE</td>\n      <td>E</td>\n      <td>4000</td>\n      <td>17.19</td>\n      <td>0.13</td>\n      <td>Y</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>58648</td>\n      <td>33</td>\n      <td>50000</td>\n      <td>RENT</td>\n      <td>4.0</td>\n      <td>DEBTCONSOLIDATION</td>\n      <td>A</td>\n      <td>7000</td>\n      <td>8.90</td>\n      <td>0.14</td>\n      <td>N</td>\n      <td>7</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>58649</td>\n      <td>26</td>\n      <td>102000</td>\n      <td>MORTGAGE</td>\n      <td>8.0</td>\n      <td>HOMEIMPROVEMENT</td>\n      <td>D</td>\n      <td>15000</td>\n      <td>16.32</td>\n      <td>0.15</td>\n      <td>Y</td>\n      <td>4</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":5},{"cell_type":"code","source":"train_features = train_dataset.iloc[:, 1:-1]\ntrain_labels = train_dataset['loan_status']\ntest_features = test_dataset.iloc[:, 1:]\ntrain_features.head()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-10-12T13:14:42.215244Z","iopub.execute_input":"2024-10-12T13:14:42.215591Z","iopub.status.idle":"2024-10-12T13:14:42.245904Z","shell.execute_reply.started":"2024-10-12T13:14:42.215543Z","shell.execute_reply":"2024-10-12T13:14:42.245012Z"}},"outputs":[{"execution_count":6,"output_type":"execute_result","data":{"text/plain":"   person_age  person_income person_home_ownership  person_emp_length  \\\n0          37          35000                  RENT                0.0   \n1          22          56000                   OWN                6.0   \n2          29          28800                   OWN                8.0   \n3          30          70000                  RENT               14.0   \n4          22          60000                  RENT                2.0   \n\n  loan_intent loan_grade  loan_amnt  loan_int_rate  loan_percent_income  \\\n0   EDUCATION          B       6000          11.49                 0.17   \n1     MEDICAL          C       4000          13.35                 0.07   \n2    PERSONAL          A       6000           8.90                 0.21   \n3     VENTURE          B      12000          11.11                 0.17   \n4     MEDICAL          A       6000           6.92                 0.10   \n\n  cb_person_default_on_file  cb_person_cred_hist_length  \n0                         N                          14  \n1                         N                           2  \n2                         N                          10  \n3                         N                           5  \n4                         N                           3  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>person_age</th>\n      <th>person_income</th>\n      <th>person_home_ownership</th>\n      <th>person_emp_length</th>\n      <th>loan_intent</th>\n      <th>loan_grade</th>\n      <th>loan_amnt</th>\n      <th>loan_int_rate</th>\n      <th>loan_percent_income</th>\n      <th>cb_person_default_on_file</th>\n      <th>cb_person_cred_hist_length</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>37</td>\n      <td>35000</td>\n      <td>RENT</td>\n      <td>0.0</td>\n      <td>EDUCATION</td>\n      <td>B</td>\n      <td>6000</td>\n      <td>11.49</td>\n      <td>0.17</td>\n      <td>N</td>\n      <td>14</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>22</td>\n      <td>56000</td>\n      <td>OWN</td>\n      <td>6.0</td>\n      <td>MEDICAL</td>\n      <td>C</td>\n      <td>4000</td>\n      <td>13.35</td>\n      <td>0.07</td>\n      <td>N</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>29</td>\n      <td>28800</td>\n      <td>OWN</td>\n      <td>8.0</td>\n      <td>PERSONAL</td>\n      <td>A</td>\n      <td>6000</td>\n      <td>8.90</td>\n      <td>0.21</td>\n      <td>N</td>\n      <td>10</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>30</td>\n      <td>70000</td>\n      <td>RENT</td>\n      <td>14.0</td>\n      <td>VENTURE</td>\n      <td>B</td>\n      <td>12000</td>\n      <td>11.11</td>\n      <td>0.17</td>\n      <td>N</td>\n      <td>5</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>22</td>\n      <td>60000</td>\n      <td>RENT</td>\n      <td>2.0</td>\n      <td>MEDICAL</td>\n      <td>A</td>\n      <td>6000</td>\n      <td>6.92</td>\n      <td>0.10</td>\n      <td>N</td>\n      <td>3</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":6},{"cell_type":"markdown","source":"### Keep consistent between train and test features\n\nSince the categories in train and test features may be different, we only need to care about the categories in test_features dataset. If a category exists in train_features but does not exist in test_features, we will fill the category in train_features with NAN.","metadata":{}},{"cell_type":"code","source":"categories_features = test_features.select_dtypes('object').columns\ncategories_features","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-10-12T13:14:42.247004Z","iopub.execute_input":"2024-10-12T13:14:42.247281Z","iopub.status.idle":"2024-10-12T13:14:42.254992Z","shell.execute_reply.started":"2024-10-12T13:14:42.247250Z","shell.execute_reply":"2024-10-12T13:14:42.254076Z"}},"outputs":[{"execution_count":7,"output_type":"execute_result","data":{"text/plain":"Index(['person_home_ownership', 'loan_intent', 'loan_grade',\n       'cb_person_default_on_file'],\n      dtype='object')"},"metadata":{}}],"execution_count":7},{"cell_type":"code","source":"for each_feature in test_features:\n\n    categories = sorted(list(set(train_features[each_feature].dropna())))\n    dtype = pd.CategoricalDtype(categories=categories, ordered=False)\n    \n    train_features.loc[~train_features[each_feature].isin(categories), each_feature] = np.nan\n    test_features.loc[~test_features[each_feature].isin(categories), each_feature] = np.nan\n    \n    train_features[each_feature] = train_features[each_feature].astype(dtype)\n    test_features[each_feature] = test_features[each_feature].astype(dtype)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-10-12T13:14:42.256375Z","iopub.execute_input":"2024-10-12T13:14:42.257080Z","iopub.status.idle":"2024-10-12T13:14:42.501598Z","shell.execute_reply.started":"2024-10-12T13:14:42.257039Z","shell.execute_reply":"2024-10-12T13:14:42.500630Z"}},"outputs":[],"execution_count":8},{"cell_type":"markdown","source":"## 2. Define Model","metadata":{}},{"cell_type":"code","source":"xgb_params={\n    \n    \n     'lambda': 0.03,\n     'alpha': 0.02,\n     'colsample_bytree': 0.4,\n     'subsample': 0.7,\n     'learning_rate': 0.014,\n     'max_depth': 17,\n     'random_state': 2024,\n     'min_child_weight': 85,\n     'n_estimators': 10000,\n     'tree_method' : 'hist', \n     'device' : 'cuda',\n     'eval_metric' : 'auc',\n     'early_stopping_rounds' : 50\n    \n \n}\n\nmodel_XGB_regressor = xgb.XGBClassifier(**xgb_params, enable_categorical=True)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-10-12T13:55:26.826922Z","iopub.execute_input":"2024-10-12T13:55:26.827299Z","iopub.status.idle":"2024-10-12T13:55:26.832905Z","shell.execute_reply.started":"2024-10-12T13:55:26.827265Z","shell.execute_reply":"2024-10-12T13:55:26.832034Z"}},"outputs":[],"execution_count":19},{"cell_type":"code","source":"print(model_XGB_regressor)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-10-12T13:55:29.626786Z","iopub.execute_input":"2024-10-12T13:55:29.627181Z","iopub.status.idle":"2024-10-12T13:55:29.633258Z","shell.execute_reply.started":"2024-10-12T13:55:29.627144Z","shell.execute_reply":"2024-10-12T13:55:29.632243Z"}},"outputs":[{"name":"stdout","text":"XGBClassifier(alpha=0.02, base_score=None, booster=None, callbacks=None,\n              colsample_bylevel=None, colsample_bynode=None,\n              colsample_bytree=0.4, device='cuda', early_stopping_rounds=50,\n              enable_categorical=True, eval_metric='auc', feature_types=None,\n              gamma=None, grow_policy=None, importance_type=None,\n              interaction_constraints=None, lambda=0.03, learning_rate=0.014,\n              max_bin=None, max_cat_threshold=None, max_cat_to_onehot=None,\n              max_delta_step=None, max_depth=17, max_leaves=None,\n              min_child_weight=85, missing=nan, monotone_constraints=None,\n              multi_strategy=None, n_estimators=10000, n_jobs=None, ...)\n","output_type":"stream"}],"execution_count":20},{"cell_type":"markdown","source":"## 3. Train and Prediction","metadata":{}},{"cell_type":"markdown","source":"### K fold Cross Validation","metadata":{}},{"cell_type":"code","source":"def get_k_fold_data(k, i, X, y):\n    assert k > 1\n    fold_size = X.shape[0] // k\n    X_train, y_train = None, None\n    for j in range(k):\n        idx = slice(j * fold_size, (j + 1) * fold_size)\n        X_part, y_part = X.iloc[idx, :], y.iloc[idx]\n        if j == i:\n            X_valid, y_valid = X_part, y_part\n        elif X_train is None:\n            X_train, y_train = X_part, y_part\n        else:\n            X_train = pd.concat([X_train, X_part], axis=0)\n            y_train = pd.concat([y_train, y_part], axis=0)\n            \n    return X_train, y_train, X_valid, y_valid","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-10-12T13:55:33.077449Z","iopub.execute_input":"2024-10-12T13:55:33.078190Z","iopub.status.idle":"2024-10-12T13:55:33.085061Z","shell.execute_reply.started":"2024-10-12T13:55:33.078150Z","shell.execute_reply":"2024-10-12T13:55:33.084102Z"}},"outputs":[],"execution_count":21},{"cell_type":"code","source":"def k_fold_xgboost(k, X_train, y_train, model):\n    \n    val_scores = []\n    test_preds = np.zeros((len(test_features), k), dtype=np.float32)\n    print(test_preds.shape)\n    \n    for i in tqdm(range(k)):\n        \n        #print(f\"i == {i}\")\n        \n        # prepare the train and valid dataset \n        data = get_k_fold_data(k, i, X_train, y_train)\n        X_train, y_train, X_valid, y_valid = data\n        \n        # prepare the model and train the model\n        model.fit(X_train, y_train,  eval_set=[(X_valid, y_valid)],verbose=500)\n\n        # Predict probabilities for the validation set and calculate AUC for validation\n        y_val_pred_proba = model.predict_proba(X_valid)[:, 1]  # Probabilities for class 1 (loan approval)\n        val_auc = roc_auc_score(y_valid, y_val_pred_proba)\n        val_scores.append(val_auc)\n        print(f\"Validation AUC for fold {i + 1}: {val_auc:.4f}\")\n        \n        # Predict and evaluate\n        logits = model.predict_proba(test_features)[:, 1]\n        test_preds[:, i] = logits\n        print(\"-\" * 50)\n        print(test_preds)\n        \n    # Average the predictions across the k folds\n    test_preds = np.mean(test_preds, axis=1)\n\n    # Return the final model (from the last fold) and the averaged predictions for the test set\n    print(f\"Average Validation AUC across folds: {np.mean(val_scores):.4f}\")\n    \n        \n    return model, test_preds","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-10-12T13:55:55.567422Z","iopub.execute_input":"2024-10-12T13:55:55.567797Z","iopub.status.idle":"2024-10-12T13:55:55.577536Z","shell.execute_reply.started":"2024-10-12T13:55:55.567760Z","shell.execute_reply":"2024-10-12T13:55:55.576445Z"}},"outputs":[],"execution_count":24},{"cell_type":"code","source":"xgb_model, test_predictions = k_fold_xgboost(k=5, X_train=train_features, y_train=train_labels, model=model_XGB_regressor)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-10-12T13:55:58.167734Z","iopub.execute_input":"2024-10-12T13:55:58.168588Z","iopub.status.idle":"2024-10-12T13:56:41.641738Z","shell.execute_reply.started":"2024-10-12T13:55:58.168548Z","shell.execute_reply":"2024-10-12T13:56:41.640725Z"}},"outputs":[{"name":"stdout","text":"(39098, 5)\n","output_type":"stream"},{"name":"stderr","text":"  0%|          | 0/5 [00:00<?, ?it/s]","output_type":"stream"},{"name":"stdout","text":"[0]\tvalidation_0-auc:0.63111\n[72]\tvalidation_0-auc:0.91574\n","output_type":"stream"},{"name":"stderr","text":" 20%|██        | 1/5 [00:00<00:03,  1.31it/s]","output_type":"stream"},{"name":"stdout","text":"Validation AUC for fold 1: 0.9177\n--------------------------------------------------\n[[0.31768468 0.         0.         0.         0.        ]\n [0.1730616  0.         0.         0.         0.        ]\n [0.22123219 0.         0.         0.         0.        ]\n ...\n [0.15239297 0.         0.         0.         0.        ]\n [0.2496299  0.         0.         0.         0.        ]\n [0.27780432 0.         0.         0.         0.        ]]\n[0]\tvalidation_0-auc:0.63426\n[500]\tvalidation_0-auc:0.92252\n[1000]\tvalidation_0-auc:0.92516\n[1500]\tvalidation_0-auc:0.92710\n[2000]\tvalidation_0-auc:0.92833\n[2500]\tvalidation_0-auc:0.92907\n[2588]\tvalidation_0-auc:0.92912\nValidation AUC for fold 2: 0.9291\n","output_type":"stream"},{"name":"stderr","text":" 40%|████      | 2/5 [00:15<00:26,  8.78s/it]","output_type":"stream"},{"name":"stdout","text":"--------------------------------------------------\n[[0.31768468 0.98979926 0.         0.         0.        ]\n [0.1730616  0.04220174 0.         0.         0.        ]\n [0.22123219 0.34114537 0.         0.         0.        ]\n ...\n [0.15239297 0.00920185 0.         0.         0.        ]\n [0.2496299  0.4139833  0.         0.         0.        ]\n [0.27780432 0.93734604 0.         0.         0.        ]]\n[0]\tvalidation_0-auc:0.65187\n[500]\tvalidation_0-auc:0.92661\n[1000]\tvalidation_0-auc:0.92892\n[1500]\tvalidation_0-auc:0.93007\n[2000]\tvalidation_0-auc:0.93098\n[2500]\tvalidation_0-auc:0.93164\n[3000]\tvalidation_0-auc:0.93213\n[3244]\tvalidation_0-auc:0.93222\nValidation AUC for fold 3: 0.9323\n","output_type":"stream"},{"name":"stderr","text":" 60%|██████    | 3/5 [00:31<00:24, 12.11s/it]","output_type":"stream"},{"name":"stdout","text":"--------------------------------------------------\n[[0.31768468 0.98979926 0.9893745  0.         0.        ]\n [0.1730616  0.04220174 0.03742715 0.         0.        ]\n [0.22123219 0.34114537 0.3014728  0.         0.        ]\n ...\n [0.15239297 0.00920185 0.01019385 0.         0.        ]\n [0.2496299  0.4139833  0.4187388  0.         0.        ]\n [0.27780432 0.93734604 0.9321683  0.         0.        ]]\n[0]\tvalidation_0-auc:0.63402\n[500]\tvalidation_0-auc:0.90862\n[1000]\tvalidation_0-auc:0.91081\n[1119]\tvalidation_0-auc:0.91095\n","output_type":"stream"},{"name":"stderr","text":" 80%|████████  | 4/5 [00:36<00:09,  9.50s/it]","output_type":"stream"},{"name":"stdout","text":"Validation AUC for fold 4: 0.9110\n--------------------------------------------------\n[[0.31768468 0.98979926 0.9893745  0.9845009  0.        ]\n [0.1730616  0.04220174 0.03742715 0.02948898 0.        ]\n [0.22123219 0.34114537 0.3014728  0.32247153 0.        ]\n ...\n [0.15239297 0.00920185 0.01019385 0.01309646 0.        ]\n [0.2496299  0.4139833  0.4187388  0.62470984 0.        ]\n [0.27780432 0.93734604 0.9321683  0.87557006 0.        ]]\n[0]\tvalidation_0-auc:0.63604\n[500]\tvalidation_0-auc:0.91099\n[1000]\tvalidation_0-auc:0.91401\n[1500]\tvalidation_0-auc:0.91573\n[1540]\tvalidation_0-auc:0.91574\n","output_type":"stream"},{"name":"stderr","text":"100%|██████████| 5/5 [00:43<00:00,  8.69s/it]","output_type":"stream"},{"name":"stdout","text":"Validation AUC for fold 5: 0.9158\n--------------------------------------------------\n[[0.31768468 0.98979926 0.9893745  0.9845009  0.9844244 ]\n [0.1730616  0.04220174 0.03742715 0.02948898 0.02147546]\n [0.22123219 0.34114537 0.3014728  0.32247153 0.28790626]\n ...\n [0.15239297 0.00920185 0.01019385 0.01309646 0.00915708]\n [0.2496299  0.4139833  0.4187388  0.62470984 0.65977573]\n [0.27780432 0.93734604 0.9321683  0.87557006 0.8486363 ]]\nAverage Validation AUC across folds: 0.9212\n","output_type":"stream"},{"name":"stderr","text":"\n","output_type":"stream"}],"execution_count":25},{"cell_type":"code","source":"submission_xgb = pd.read_csv('/kaggle/input/playground-series-s4e10/sample_submission.csv')\nsubmission_xgb['loan_status'] = test_predictions\nsubmission_xgb.to_csv('submission_xgb.csv', index=False)\nsubmission_xgb","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-10-12T14:00:42.715961Z","iopub.execute_input":"2024-10-12T14:00:42.716343Z","iopub.status.idle":"2024-10-12T14:00:42.824284Z","shell.execute_reply.started":"2024-10-12T14:00:42.716306Z","shell.execute_reply":"2024-10-12T14:00:42.823445Z"}},"outputs":[{"execution_count":29,"output_type":"execute_result","data":{"text/plain":"          id  loan_status\n0      58645     0.853157\n1      58646     0.060731\n2      58647     0.294846\n3      58648     0.066039\n4      58649     0.249951\n...      ...          ...\n39093  97738     0.063778\n39094  97739     0.034409\n39095  97740     0.038808\n39096  97741     0.473368\n39097  97742     0.774305\n\n[39098 rows x 2 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>loan_status</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>58645</td>\n      <td>0.853157</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>58646</td>\n      <td>0.060731</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>58647</td>\n      <td>0.294846</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>58648</td>\n      <td>0.066039</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>58649</td>\n      <td>0.249951</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>39093</th>\n      <td>97738</td>\n      <td>0.063778</td>\n    </tr>\n    <tr>\n      <th>39094</th>\n      <td>97739</td>\n      <td>0.034409</td>\n    </tr>\n    <tr>\n      <th>39095</th>\n      <td>97740</td>\n      <td>0.038808</td>\n    </tr>\n    <tr>\n      <th>39096</th>\n      <td>97741</td>\n      <td>0.473368</td>\n    </tr>\n    <tr>\n      <th>39097</th>\n      <td>97742</td>\n      <td>0.774305</td>\n    </tr>\n  </tbody>\n</table>\n<p>39098 rows × 2 columns</p>\n</div>"},"metadata":{}}],"execution_count":29},{"cell_type":"code","source":"xgb_model.save_model('/kaggle/working/xgb_model.json')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-10-12T14:03:43.801231Z","iopub.execute_input":"2024-10-12T14:03:43.801579Z","iopub.status.idle":"2024-10-12T14:03:43.884043Z","shell.execute_reply.started":"2024-10-12T14:03:43.801544Z","shell.execute_reply":"2024-10-12T14:03:43.883186Z"}},"outputs":[],"execution_count":30}]}